An abstract class is a class that is declared abstractâ€”it may or may not include abstract methods. 
Abstract classes cannot be instantiated, but they can be subclassed.

A class is a construct that enables you to create your own custom types by grouping together variables of other types, 
methods and events. A class is like a blueprint. It defines the data and behavior of a type. 
If the class is not declared as static, client code can use it by creating objects or instances which are assigned 
to a variable. The variable remains in memory until all references to it go out of scope. At that time, 
the CLR marks it as eligible for garbage collection. If the class is declared as static, 
then only one copy exists in memory and client code can only access it through the class itself, not an instance variable.

Abstract classes, marked by the keyword abstract in the class definition, 
are typically used to define a base class in the hierarchy. What's special about them, 
is that you can't create an instance of them - if you try, you will get a compile error. 
Instead, you have to subclass them, and create an instance of your subclass. 
So when do you need an abstract class? It really depends on what you do. 
