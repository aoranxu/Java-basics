While both of these are designed to hold a collection of unique items, they also have different strengths a weaknesses.

If you need all items in your collection to be ordered at all times, then a binary-search-tree is usually a better bet.
Hash-tables do not support item ordering. I would say that things get placed in the most random places,
but there is a really strict set of rules for where things get placed in a hash-table.

If you are constantly adding and removing items to and from the collection, then a binary search tree tends to be a better bet.
Moving all the items to a larger container in the hash-map takes O(n) time.
Removing items from a hash-map doesn’t free up as much memory as removing them from a binary-search-tree.
Unless you place the remaining items in a smaller (pre-sized) container, which would take O(n) time to do.

When dealing with small collections (like less than 20 items), a binary-search-tree has faster look-up times.
One of the other answers already mentioned this, but the hash-table needs
time to run the item through the hashing function. This will save you a lot of time when dealing with a large number of items, 
because you can use the hash-function’s result in much the same way we use the index on the back of the book.
It lets you skip right to the spots that might contain the information you are looking for.
